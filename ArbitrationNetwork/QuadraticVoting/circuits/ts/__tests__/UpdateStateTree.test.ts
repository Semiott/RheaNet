jest.setTimeout(1200000)
import {
    executeCircuit,
    getSignalByName,
    compileAndLoadCircuit,
} from '../'

import { MaciState } from 'maci-core'

import {
    Keypair,
    Command,
} from 'maci-domainobjs'
import {
    genRandomSalt,
} from 'maci-crypto'

import { config } from 'maci-config'

const stateTreeDepth = config.maci.merkleTrees.stateTreeDepth
const messageTreeDepth = config.maci.merkleTrees.messageTreeDepth
const voteOptionTreeDepth = config.maci.merkleTrees.voteOptionTreeDepth
const initialVoiceCreditBalance = config.maci.initialVoiceCreditBalance
const voteOptionsMaxIndex = config.maci.voteOptionsMaxLeafIndex

// Set up keypairs
const user = new Keypair()
const coordinator = new Keypair()

const stateIndex = BigInt(1)
const voteOptionIndex = BigInt(0)
const newVoteWeight = BigInt(9)
const nonce = BigInt(1)
const salt = genRandomSalt()

const command = new Command(
    stateIndex,
    user.pubKey,
    voteOptionIndex,
    newVoteWeight,
    nonce,
    salt,
)

const signature = command.sign(user.privKey)
const sharedKey = Keypair.genEcdhSharedKey(user.privKey, coordinator.pubKey)
const message = command.encrypt(signature, sharedKey)

describe('State tree root update verification circuit', () => {
    let circuit 
    let circuitInputs

    const maciState = new MaciState(
        coordinator,
        stateTreeDepth,
        messageTreeDepth,
        voteOptionTreeDepth,
        voteOptionsMaxIndex,
    )

    beforeAll(async () => {
        circuit = await compileAndLoadCircuit('test/updateStateTree_test.circom')

        // Sign up the user
        maciState.signUp(user.pubKey, initialVoiceCreditBalance)

        // Publish a message
        maciState.publishMessage(message, user.pubKey)

        // Generate circuit inputs
        circuitInputs = maciState.genUpdateStateTreeCircuitInputs(0)
    })

    it('UpdateStateTree should produce the correct state root', async () => {
        // Calculate the witness
        const witness = await executeCircuit(circuit, circuitInputs)

        // Get the circuit-generated root
        const circuitNewStateRoot = getSignalByName(circuit, witness, 'main.root').toString()

        const stateRootBefore = maciState.genStateRoot().toString()

        // Before we run process the message via maciState.processMessage(),
        // the root generated by the circuit should not match
        expect(circuitNewStateRoot).not.toEqual(stateRootBefore.toString())

        // Process the message
        maciState.processMessage(0)
        const stateRootAfter = maciState.genStateRoot().toString()

        expect(stateRootBefore).not.toEqual(stateRootAfter)

        // After we run process the message via maciState.processMessage(),
        // the root generated by the circuit should match
        expect(circuitNewStateRoot).toEqual(stateRootAfter)
    })
})
